{"version":3,"sources":["main.js","trippy.js"],"names":[],"mappings":"AAAA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"site.js","sourcesContent":["$(document).ready(function(){\n\n});","var svgEl = document.querySelector('.animated-lines');\n\nvar randomRange = function(min, max) {\n  return ~~(Math.random() * (max - min + 1)) + min\n};\n\nvar numberOfLines = 20,\n  lineDataArr = [];\n\nvar createPathString = function() {\n\n  var completedPath = '',\n    comma = ',',\n    ampl = 50; // pixel range from 0, aka how deeply they bend\n\n  for (var i = 0; i < numberOfLines; i++) {\n\n    var path = lineDataArr[i];\n\n    var current = {\n      x: ampl * Math.sin(path.counter / path.sin),\n      y: ampl * Math.cos(path.counter / path.cos)\n    };\n\n    var newPathSection = 'M' +\n      // starting point\n      path.startX +\n      comma +\n      path.startY +\n      // quadratic control point\n      ' Q' +\n      path.pointX +\n      comma +\n      (current.y * 1.5).toFixed(3) + // 1.5 to amp up the bend a little\n      // center point intersection\n      ' ' +\n      ((current.x) / 10 + path.centerX).toFixed(3) +\n      comma +\n      ((current.y) / 5 + path.centerY).toFixed(3) +\n      // end point with quadratic reflection (T) (so the bottom right mirrors the top left)\n      ' T' +\n      path.endX +\n      comma +\n      path.endY;\n    path.counter++;\n\n    completedPath += newPathSection;\n\n  };\n\n  return completedPath;\n\n};\n\nvar createLines = function() {\n\n  var newPathEl = document.createElementNS('http://www.w3.org/2000/svg', 'path'),\n    // higher is slower\n    minSpeed = 85,\n    maxSpeed = 150;\n\n  // create an arr which contains objects for all lines\n  // createPathString() will use this array\n  for (var i = 0; i < numberOfLines; i++) {\n\n    var lineDataObj = {\n      counter: randomRange(1, 500), // a broad counter range ensures lines start at different cycles (will look more random)\n      startX: randomRange(-5, -40),\n      startY: randomRange(-5, -30),\n      endX: randomRange(200, 220), // viewbox = 200\n      endY: randomRange(120, 140), // viewbox = 120\n      sin: randomRange(minSpeed, maxSpeed),\n      cos: randomRange(minSpeed, maxSpeed),\n      pointX: randomRange(30, 55),\n      centerX: randomRange(90, 120),\n      centerY: randomRange(60, 70)\n    }\n\n    lineDataArr.push(lineDataObj)\n\n  }\n\n  var animLoop = function() {\n    newPathEl.setAttribute('d', createPathString());\n    requestAnimationFrame(animLoop);\n  }\n\n  // once the path elements are created, start the animation loop\n  svgEl.appendChild(newPathEl);\n  animLoop();\n\n};\n\ncreateLines();"]}