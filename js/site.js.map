{"version":3,"sources":["main.js","trippy.js"],"names":[],"mappingsfile":"site.js","sourcesContent":["$(document).ready(function(){\n\n});","/**\n * Generates multiple customizable animated sines waves\n * using a canvas element. Supports retina displays and\n * limited mobile support\n *\n * I've created a seperate library based on this pen. \n * Check it out at https://github.com/isuttell/sine-waves\n */\nfunction SineWaveGenerator(options) {\n    $.extend(this, options || {});\n    \n    if(!this.el) { throw \"No Canvas Selected\"; }\n    this.ctx = this.el.getContext('2d');\n    \n    if(!this.waves.length) { throw \"No waves specified\"; }\n    \n    // Internal\n    this._resizeWidth();\n    window.addEventListener('resize', this._resizeWidth.bind(this));\n    // User\n    this.resizeEvent();\n    window.addEventListener('resize', this.resizeEvent.bind(this));\n    \n    if(typeof this.initialize === 'function') {\n      this.initialize.call(this);\n    }\n    // Start the magic\n    this.loop();\n  }\n  \n  // Defaults\n  SineWaveGenerator.prototype.speed = 10;\n  SineWaveGenerator.prototype.amplitude = 50;\n  SineWaveGenerator.prototype.wavelength = 50;\n  SineWaveGenerator.prototype.segmentLength = 10;\n  \n  SineWaveGenerator.prototype.lineWidth = 2;\n  SineWaveGenerator.prototype.strokeStyle  = 'rgba(255, 255, 255, 0.2)';\n  \n  SineWaveGenerator.prototype.resizeEvent = function() {};\n  \n  // fill the screen\n  SineWaveGenerator.prototype._resizeWidth = function() {\n    this.dpr = window.devicePixelRatio || 1;\n    \n    this.width = this.el.width = window.innerWidth * this.dpr;\n    this.height = this.el.height = window.innerHeight * this.dpr;\n    this.el.style.width = window.innerWidth + 'px';\n    this.el.style.height = window.innerHeight + 'px';\n    \n    this.waveWidth = this.width * 0.95;\n    this.waveLeft = this.width * 0.025;\n  }\n  \n  SineWaveGenerator.prototype.clear = function () {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n  \n  SineWaveGenerator.prototype.time = 0;\n  \n  SineWaveGenerator.prototype.update = function(time) {  \n    this.time = this.time - 0.007;\n    if(typeof time === 'undefined') {\n      time = this.time;\n    }\n  \n    var index = -1;\n    var length = this.waves.length;\n  \n    while(++index < length) {\n      var timeModifier = this.waves[index].timeModifier || 1;\n      this.drawSine(time * timeModifier, this.waves[index]);\n    }\n    index = void 0;\n    length = void 0;\n  }\n  \n  // Constants\n  var PI2 = Math.PI * 2;\n  var HALFPI = Math.PI / 2;\n  \n  SineWaveGenerator.prototype.ease = function(percent, amplitude) {\n    return amplitude * (Math.sin(percent * PI2 - HALFPI) + 1) * 0.5;\n  }\n  \n  SineWaveGenerator.prototype.drawSine = function(time, options) {\n    options = options || {};\n    amplitude = options.amplitude || this.amplitude;\n    wavelength = options.wavelength || this.wavelength;\n    lineWidth = options.lineWidth || this.lineWidth;\n    strokeStyle = options.strokeStyle || this.strokeStyle;\n    segmentLength = options.segmentLength || this.segmentLength;\n    \n    var x = time;\n    var y = 0;  \n    var amp = this.amplitude;\n   \n    // Center the waves\n    var yAxis = this.height / 2; \n    \n    // Styles\n    this.ctx.lineWidth = lineWidth * this.dpr;\n    this.ctx.strokeStyle = strokeStyle;\n    this.ctx.lineCap = 'round';\n    this.ctx.lineJoin = 'round';\n    this.ctx.beginPath();\n    \n    // Starting Line\n    this.ctx.moveTo(0, yAxis);\n    this.ctx.lineTo(this.waveLeft, yAxis);\n    \n    for(var i = 0; i < this.waveWidth; i += segmentLength) {\n      x = (time * this.speed) + (-yAxis + i) / wavelength; \n      y = Math.sin(x); \n      \n      // Easing\n      amp = this.ease(i / this.waveWidth, amplitude); \n      \n      this.ctx.lineTo(i + this.waveLeft, amp * y + yAxis);\n      \n      amp = void 0;\n    }\n    \n    // Ending Line\n    this.ctx.lineTo(this.width, yAxis);\n    \n    // Stroke it\n    this.ctx.stroke();\n    \n    // Clean up\n    options = void 0;\n    amplitude = void 0;\n    wavelength = void 0;\n    lineWidth = void 0;\n    strokeStyle = void 0;\n    segmentLength = void 0;\n    x = void 0;\n    y = void 0;\n  } \n  \n  SineWaveGenerator.prototype.loop = function() {\n    this.clear();\n    this.update();\n    \n    window.requestAnimationFrame(this.loop.bind(this));\n  }\n  \n  new SineWaveGenerator({\n    el: document.getElementById('waves'),\n    \n    speed: 8,\n    \n    waves: [\n      {\n        timeModifier: 1,\n        lineWidth: 3,\n        amplitude: 150,\n        wavelength: 200,\n        segmentLength: 20,\n  //       strokeStyle: 'rgba(255, 255, 255, 0.5)'\n      },\n      {\n        timeModifier: 1,\n        lineWidth: 2,\n        amplitude: 150,\n        wavelength: 100,\n  //       strokeStyle: 'rgba(255, 255, 255, 0.3)'\n      },\n      {\n        timeModifier: 1,\n        lineWidth: 1,\n        amplitude: -150,\n        wavelength: 50,\n        segmentLength: 10,\n  //       strokeStyle: 'rgba(255, 255, 255, 0.2)'\n      },\n      {\n        timeModifier: 1,\n        lineWidth: 0.5,\n        amplitude: -100,\n        wavelength: 100,\n        segmentLength: 10,\n  //       strokeStyle: 'rgba(255, 255, 255, 0.1)'\n      }\n    ],\n    \n    initialize: function (){\n  \n    },\n    \n    resizeEvent: function() {\n      var gradient = this.ctx.createLinearGradient(0, 0, this.width, 0);\n      gradient.addColorStop(0,\"rgba(0, 0, 0, 0)\");\n      gradient.addColorStop(0.5,\"rgba(255, 255, 255, 0.5)\");\n      gradient.addColorStop(1,\"rgba(0, 0, 0, 0)\");\n      \n      var index = -1;\n      var length = this.waves.length;\n        while(++index < length){\n        this.waves[index].strokeStyle = gradient;\n      }\n      \n      // Clean Up\n      index = void 0;\n      length = void 0;\n      gradient = void 0;\n    }\n  });"]}